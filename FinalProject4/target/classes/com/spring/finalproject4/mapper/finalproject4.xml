<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="finalproject4">

	<!-- === MainPage === -->
	<select id="getProdList" parameterType="String" resultType="com.spring.model.ProdVO">
		select prod_id, fk_category_id, fk_category_detail_id, prod_title, prod_img, prod_detail_img, date_start, date_end
		     , info_open_date, info_close_date, info_rev_status, info_grade, info_run_time, info_qnty, status, map_id
		from prod
		where fk_category_id = #{category}
		order by info_open_date desc
	</select>
	
	<select id="getHotProdList" parameterType="String" resultType="com.spring.model.ProdVO">
		select prod_id, fk_category_id, fk_category_detail_id, prod_title, prod_img, prod_detail_img, date_start, date_end
		     , info_open_date, info_close_date, info_rev_status, info_grade, info_run_time, info_qnty, status, map_id
		from prod
		where fk_category_id = #{category}
		order by info_qnty desc
	</select>
	
	<select id="getlocalRecProdList" parameterType="String" resultType="com.spring.model.ProdVO">
		select prod_id, fk_category_id, fk_category_detail_id, prod_title, prod_img, prod_detail_img, date_start, date_end
		     , info_open_date, info_close_date, info_rev_status, info_grade, info_run_time, info_qnty, status, map_id
		from prod
		where fk_category_id = #{category}
		order by info_qnty desc
	</select>
	
	<select id="getCategoryName" parameterType="String" resultType="String">
		select category_name
		from yes_show_category
		where category_id = #{category}
	</select>
	
	<resultMap type="HashMap" id="detailCategoryName">
		<result property="category_detail_id"	column="category_detail_id"		javaType="String"/>
		<result property="category_detail_name"	column="category_detail_name"	javaType="String"/>
	</resultMap>
	<select id="getdetailCategoryName" parameterType="String" resultMap="detailCategoryName">
		select category_detail_id, category_detail_name
		from yes_show_category_detail
		where category_id = #{category}
	</select>
	
	<!-- 카테고리 select show list -->
	<resultMap type="HashMap" id="selectOneMap">
		<result property="RNO"				column="RNO"			javaType="String"/>
		<result property="prod_id"			column="prod_id"		javaType="String"/>
		<result property="prod_title"		column="prod_title"		javaType="String"/>
		<result property="prod_img"			column="prod_img"		javaType="String"/>
		<result property="map_name"			column="map_name"		javaType="String"/>
		<result property="prod_discount"	column="prod_discount"	javaType="String"/>
	</resultMap>
	<select id="selectOne" parameterType="HashMap" resultMap="selectOneMap">
		select RNO, prod_id, prod_title, prod_img, map_name, prod_discount
		from
		(
		    select rownum AS RNO, prod_id, prod_title, prod_img, map_name, prod_discount
		    from
		    (
		        select P.prod_id, P.prod_title, P.prod_img, M.map_name, P.prod_discount
		        from prod P join yes_show_map M
		        on P.map_id = M.map_id
		        where fk_category_id like '%'||#{categoryNum}||'%' and fk_category_detail_id like '%'||#{detailCategoryNum}||'%'
		        order by info_qnty desc
		    ) V
		) T
		where T.RNO between #{startCnt} and #{endCnt}
	</select>
	
	<resultMap type="HashMap" id="selectTwoMap">
		<result property="RNO"				column="RNO"			javaType="String"/>
		<result property="prod_id"			column="prod_id"		javaType="String"/>
		<result property="prod_title"		column="prod_title"		javaType="String"/>
		<result property="prod_img"			column="prod_img"		javaType="String"/>
		<result property="map_name"			column="map_name"		javaType="String"/>
		<result property="prod_discount"	column="prod_discount"	javaType="String"/>
	</resultMap>
	<select id="selectTwo" parameterType="HashMap" resultMap="selectTwoMap">
		select RNO, prod_id, prod_title, prod_img, map_name, prod_discount
		from
		(
		    select rownum AS RNO, prod_id, prod_title, prod_img, map_name, prod_discount
		    from
		    (
		        select P.prod_id, P.prod_title, P.prod_img, M.map_name, P.prod_discount
		        from prod P join yes_show_map M
		        on P.map_id = M.map_id
		        where fk_category_id like '%'||#{categoryNum}||'%' and fk_category_detail_id like '%'||#{detailCategoryNum}||'%'
		        order by info_open_date desc
		    ) V
		) T
		where T.RNO between #{startCnt} and #{endCnt}
	</select>
	
	<resultMap type="HashMap" id="selectThreeMap">
		<result property="RNO"				column="RNO"			javaType="String"/>
		<result property="prod_id"			column="prod_id"		javaType="String"/>
		<result property="prod_title"		column="prod_title"		javaType="String"/>
		<result property="prod_img"			column="prod_img"		javaType="String"/>
		<result property="map_name"			column="map_name"		javaType="String"/>
		<result property="prod_discount"	column="prod_discount"	javaType="String"/>
	</resultMap>
	<select id="selectThree" parameterType="HashMap" resultMap="selectThreeMap">
		select RNO, prod_id, prod_title, prod_img, map_name, prod_discount
		from
		(
		    select rownum AS RNO, prod_id, prod_title, prod_img, map_name, prod_discount
		    from
		    (
		        select P.prod_id, P.prod_title, P.prod_img, M.map_name, P.prod_discount
		        from prod P join yes_show_map M
		        on P.map_id = M.map_id
		        where fk_category_id like '%'||#{categoryNum}||'%' and fk_category_detail_id like '%'||#{detailCategoryNum}||'%'
		        order by info_close_date
		    ) V
		) T
		where T.RNO between #{startCnt} and #{endCnt}
	</select>
	
	<resultMap type="HashMap" id="selectFourMap">
		<result property="RNO"				column="RNO"			javaType="String"/>
		<result property="prod_id"			column="prod_id"		javaType="String"/>
		<result property="prod_title"		column="prod_title"		javaType="String"/>
		<result property="prod_img"			column="prod_img"		javaType="String"/>
		<result property="map_name"			column="map_name"		javaType="String"/>
		<result property="prod_discount"	column="prod_discount"	javaType="String"/>
	</resultMap>
	<select id="selectFour" parameterType="HashMap" resultMap="selectFourMap">
		select RNO, prod_id, prod_title, prod_img, map_name, prod_discount
		from
		(
		    select rownum AS RNO, prod_id, prod_title, prod_img, map_name, prod_discount
		    from
		    (
		        select P.prod_id, P.prod_title, P.prod_img, M.map_name, P.prod_discount
		        from prod P join yes_show_map M
		        on P.map_id = M.map_id
		        where fk_category_id like '%'||#{categoryNum}||'%' and fk_category_detail_id like '%'||#{detailCategoryNum}||'%'
		        order by prod_title
		    ) V
		) T
		where T.RNO between #{startCnt} and #{endCnt}
	</select>
	
	<select id="getTotalCnt" parameterType="HashMap" resultType="String">
		select count(*)
		    from
		    (
		        select P.prod_id, P.prod_title, P.prod_img, M.map_name, P.prod_discount
		        from prod P join yes_show_map M
		        on P.map_id = M.map_id
		        where fk_category_id like '%'||#{categoryNum}||'%' and fk_category_detail_id like '%'||#{detailCategoryNum}||'%'
		    ) V
	</select>
	
	
	<!-- === Pay(예매하기) 관련 === -->
	<resultMap type="HashMap" id="resShowInfo">
		<result property="prod_id"			column="prod_id"		javaType="String"/>
		<result property="prod_img"			column="prod_img"		javaType="String"/>
		<result property="prod_title"		column="prod_title"		javaType="String"/>
		<result property="info_grade"		column="info_grade"		javaType="String"/>
		<result property="info_run_time"	column="info_run_time"	javaType="String"/>
		<result property="map_name"			column="map_name"		javaType="String"/>
	</resultMap>
	<select id="getShowRsvInfo" resultMap="resShowInfo" parameterType="String">
		select prod_id, prod_img, prod_title, info_grade, info_run_time, map_name 
		from view_rev_showInfo
		where prod_id = #{showNum}
	</select>
	
	<resultMap type="HashMap" id="resShowTime">
		<result property="date_showday"		column="date_showday"	javaType="String"/>
		<result property="date_showtime"	column="date_showtime"	javaType="String"/>
	</resultMap>
	<select id="getShowTime" resultMap="resShowTime" parameterType="String">
		select prod_id, to_char(date_showday, 'yy/mm/dd') || ' ' || to_char(date_showday, 'day') as date_showday, date_showtime
		from yes_show_date
		where prod_id = #{showNum}
		order by date_showday, date_showtime
	</select>
	
	<select id="getShowDay" resultType="String" parameterType="String">
		select distinct to_char(date_showday, 'yy/mm/dd') || ' ' || to_char(date_showday, 'day') as date_showday
		from yes_show_date
		where prod_id = #{showNum}
		order by date_showday
	</select>
	
	<resultMap type="HashMap" id="seatStatus">
		<result property="date_id"			column="date_id"		javaType="String"/>
		<result property="prod_id"			column="prod_id"		javaType="String"/>
		<result property="seattype_id"		column="seattype_id"	javaType="String"/>
		<result property="seat_type"		column="seat_type"		javaType="String"/>
		<result property="seat_name"		column="seat_name"		javaType="String"/>
		<result property="seat_price"		column="seat_price"		javaType="String"/>
		<result property="seat_status"		column="seat_status"	javaType="String"/>
		<result property="date_id"			column="date_id"		javaType="String"/>
		<result property="seat_color"		column="seat_color"		javaType="String"/>
	</resultMap>
	<select id="getSeatStatus" parameterType="String" resultMap="seatStatus">
		select date_id, prod_id, seattype_id, seat_type, seat_name, seat_price, seat_status, date_id, seat_color
		from view_seat_info
		where prod_id = #{showNum}
	</select>
	
	<resultMap type="HashMap" id="seatType">
		<result property="seat_type"		column="seat_type"	javaType="String"/>
		<result property="seat_price"		column="seat_price"	javaType="String"/>
		<result property="seat_color"		column="seat_color"	javaType="String"/>
	</resultMap>
	<select id="getSeatType" resultMap="seatType" parameterType="String">
		select seat_type, seat_price, seat_color
		from yes_seat_type
		where prod_id = #{showNum}
	</select>
	
	<select id="getDateId" parameterType="HashMap" resultType="String">
		select date_id
		from yes_show_date
		where prod_id = #{showNum} and to_char(date_showday, 'yy/mm/dd') || ' ' || to_char(date_showday, 'day') = #{showDay} and date_showtime = #{showRound}
	</select>
	
	
	
	
	<!-- ===== BOARD(공지사항, FAQ, QNA, 리뷰 부분 ===== -->
	<!-- FAQ 리스트(검색어 있음) -->
	<select id="faqList" parameterType="HashMap" resultType="com.spring.model.FaqVO">
		select faq_id, fk_userid, subject, content, regDate, status, faq_cate_name
		from(
		select rownum as rno, faq_id, fk_userid, subject, content, regDate, status, faq_cate_name
		from 
		(
		select faq_id, fk_userid, C.faq_cate_name, fk_category, subject, content, regDate, status
		from yes_faq F join yes_faq_cate C
		on F.fk_category = C.faq_cate_code
		) T
		where 1=1 
		<if test='category != ""'>
		and fk_category = #{category} 
		</if>
		<if test='searchWord != ""'>
		and lower(subject) like '%' || lower(#{searchWord}) || '%'
		</if>
		) V
		where rno between #{startRno} and ${endRno}
	</select>
	
	<!-- ###  -->
	
	<!-- 총  FAQ 글 개수 -->
	<select id="getTotalFaqCount" parameterType="HashMap" resultType="int">
		select count(*) 
		from yes_faq
		where 1=1 
		<if test='searchWord != ""'>
		and lower(subject) like '%' || lower(#{searchWord}) || '%'
		</if>
		<if test='category != ""'>
		and fk_category = #{category}
		</if>
	</select>
	
	<!-- 총 공지글 개수 -->
	<select id="getTotalNoticeCount" parameterType="HashMap" resultType="int">
		select count(*) 
		from yes_notice
		where 1=1 
		<if test='searchWord != ""'>
		and lower(subject) like '%' || lower(#{searchWord}) || '%'
		</if>
	</select>
	
	<!-- 페이징처리한 공지글 리스트 -->
	<select id="noticeListWithPaging" parameterType="HashMap" resultType="com.spring.model.NoticeVO">
		select notice_id, fk_userid,no_cate_name,category,ticketopenday,subject,readCount,regDate,status,fileName,orgFilename,fileSize
		    from
		    (
		        select row_number() over(order by ${order} desc) AS rno, notice_id,fk_userid,no_cate_name,category,ticketopenday,subject,readCount,regDate,status,fileName,orgFilename,fileSize
		        from
		        (
			        select notice_id,fk_userid,no_cate_name,category,nvl(ticketopenday, ' ') as ticketopenday,subject,readCount,regDate,status,fileName,orgFilename,fileSize
			        from yes_notice N join yes_notice_cate C
			        on N.category = C.no_cate_code
            		order by notice_id desc
		        )
		        where status = 1
		        <if test='searchWord != ""'>
		        and lower(subject) like '%' || lower(#{searchWord}) || '%'
		        </if>
		    )V
		where rno between #{startRno} and #{endRno}
	</select>
	
	
	<!-- 공지사항 글 1개 보기 페이지로 이동(조회수 증가 없음) -->
	<select id="getView" parameterType="HashMap" resultType="com.spring.model.NoticeVO">
		select previousseq, previoussubject
		       , notice_id,fk_userid,category, ticketopenday, subject,readCount
		       , regDate
		       , fileName,orgFilename,fileSize
			   , nextseq, nextsubject
				from
				    (
		                select lag(notice_id, 1) over(order by notice_id desc) as previousseq
				       , lag(subject, 1) over(order by notice_id desc) as previoussubject
				       
				       , notice_id, fk_userid, category, subject, readCount
		               , nvl(ticketopenday, ' ') as ticketopenday
				       , to_char(regDate, 'yyyy-mm-dd') as regDate
				       , status, fileName, orgFilename, fileSize
				       
				       , lead(notice_id, 1) over(order by notice_id desc) as nextseq
				       , lead(subject, 1) over(order by notice_id desc) as nextsubject
		                from yes_notice
		                where status = 1
				    ) V
		where notice_id = #{seq}
	</select>
	
	
	<!-- 공지사항 글1개 보기 조회수 증가 -->
	<update id="setAddReadCount" parameterType="String">
		update yes_notice set readCount = readCount + 1
		where notice_id = #{seq}
	</update>
	
	
	<!-- qna 테이블에서 groupno 컬럼의 최대값 구하기 -->
	<select id="getGroupnoMax" resultType="int">
		select nvl(max(groupno),0)
		from yes_qna
	</select>
	<!-- 최초에는 max(groupno) 가 없으므로 null 이니까 nvl 로 null 을 0 으로 처리한다. -->
	
	<!-- Qna 문의 등록하기 -->
	<insert id="qnaAdd" parameterType="HashMap">
		insert into yes_qna (qna_id, fk_userid, name, category, fk_rev_id, subject, content, groupno, fk_seq, depthno)
		values(qnaSeq.nextval, #{fk_userid}, #{name}, #{category}, #{fk_rev_id}, #{subject}, #{content}, #{groupno}, 0, 0)
	</insert>
	
	<!-- 로그인한 회원의 예매공연목록과 예매공연코드 가져오기 -->
	<resultMap type="HashMap" id="reserveTitleList">
		<result property="prod_title"		column="prod_title"		javaType="String"/>
		<result property="prod_id"			column="prod_id"		javaType="String"/>
	</resultMap>
	<select id="reserveTitleList" parameterType="int" resultMap="reserveTitleList">
		select distinct prod_title, prod_id
		from view_rev_memberInfo
		where idx = #{idx}
	</select>
	
	<!-- qna 글목록 보여주기 -->
	<select id="qnaList" parameterType="HashMap" resultType="com.spring.model.QnaVO">
		<!-- select *
		from(
		    select rownum as rno, qna_id, fk_userid, name, category, qna_cate_name, subject, content, readcount, regDate, secret, adminread, adminans, status, groupno, fk_seq, depthno
		          ,fk_rev_id, prod_id, rev_email, prod_img, prod_title
		    from view_qna_info
		    where status = 1
		    <if test='searchWord != ""'>
	        and ( lower(fk_userid) like lower(#{searchWord})  or lower(prod_title) like '%' || lower(#{searchWord}) || '%' )
	        </if>
		    <if test='category != ""'>
			and category = #{category}
			</if>
		    order by qna_id desc
		)T
		where rno between #{startRno} and #{endRno} -->
		select qna_id, fk_userid, name, qna_cate_name, subject, content
                 , regDate, adminread, adminans, groupno, fk_seq, depthno
                 ,fk_rev_id, prod_id, rev_email, prod_img, prod_title
		from 
		(
		    select rownum AS rno
		         , qna_id, fk_userid, name, qna_cate_name, subject, content
                 , regDate, adminread, adminans, groupno, fk_seq, depthno
                 ,fk_rev_id, prod_id, rev_email, prod_img, prod_title
		    from
		    (
		        select qna_id, fk_userid, name, qna_cate_name, subject, content
                        , to_char(regDate, 'yyyy-mm-dd hh24:mi:ss') as regDate, adminread, adminans, groupno, fk_seq, depthno
                        ,fk_rev_id, prod_id, rev_email, prod_img, prod_title
		        from view_qna_info
		        where status = 1
		        <if test='searchWord != ""'>
		        and ( lower(fk_userid) like lower(#{searchWord})  or lower(prod_title) like '%' || lower(#{searchWord}) || '%' )
		        </if>
			    <if test='category != ""'>
				and category = #{category}
				</if>
		        start with fk_seq = 0
		        connect by prior qna_id = fk_seq
		        order siblings by groupno desc, qna_id asc
		    ) V
		) T
		where rno between #{startRno} and #{endRno}
	</select>
	
	<!-- 총 qna 개수 -->
	<select id="getTotalQnaCount" parameterType="HashMap" resultType="int">
		select count(*) 
		from view_qna_info
		where 1=1 
		<if test='searchWord != ""'>
		and ( lower(fk_userid) like lower(#{searchWord})  or lower(prod_title) like '%' || lower(#{searchWord}) || '%' )
		</if>
		<if test='category != ""'>
		and category = #{category}
		</if>
	</select>
	
	
	<!-- qna 글 1개 보기 페이지로 이동 -->
	<select id="getQnaView" parameterType="String" resultType="com.spring.model.QnaVO">
		select qna_id, fk_userid, name, category, qna_cate_name, subject, content, regDate, adminread, adminans, groupno, fk_seq, depthno
        	  ,fk_rev_id, prod_id, rev_email, prod_img, prod_title
		from view_qna_info
		where qna_id = #{seq}
	</select>
	
	<!-- Qna 답변 등록하기 -->
	<insert id="qnaAddAdmin" parameterType="com.spring.model.QnaVO">
		insert into yes_qna(qna_id,fk_userid,name,category,subject,content,groupno,fk_seq,depthno)
		values(qnaSeq.nextval, #{fk_userid}, #{name}, #{category}, #{subject}, #{content}, #{groupno}, #{fk_seq}, #{depthno})
	</insert>
	
	
	<!-- ===== BOARD(공지사항, FAQ, QNA, 리뷰 부분 ===== -->
	
	
	<select id="getTotalProdCount" parameterType="HashMap" resultType="int">
		select count(*)
      	from prod
      	where status = 1 
      	<if test="searchWord != ''">
      	and lower(prod_title) like '%'|| lower(#{searchWord}) || '%'
      	</if>
   	</select>
   
   	<select id="prodList" parameterType="HashMap" resultType="com.spring.model.ProdVO">
      	select RNO, prod_id, category_name, fk_category_id, prod_title, prod_img, date_start, date_end, info_open_date, info_close_date, info_rev_status, info_qnty, map_address, map_id
      	from (
          	select ROW_NUMBER() OVER (ORDER BY prod_id desc) as RNO, prod_id, category_name, fk_category_id, prod_title, prod_img, date_start, date_end, info_open_date, info_close_date, info_rev_status, info_qnty, map_address, map_id
          	from (
              	select P.prod_id, C.category_name, fk_category_id, prod_title, prod_img, date_start, date_end, info_open_date, info_close_date, info_rev_status, info_qnty, map_address, M.map_id, status
              	from prod P join yes_show_category C
              	on P. fk_category_id = C.category_id
              	left join yes_show_map M
              	on P.prod_id = M. prod_id
              	order by P.prod_id
          	) V
          	where status = 1 
          	<if test="searchWord != ''">
             	and lower(prod_title) like '%' || lower(#{searchWord}) || '%'
          	</if>
      	) T
      	where rno between #{startRno} and #{endRno}
   	</select>
	
	
	
	
	
	<!-- ===== Member ===== -->
	<!-- === #47. 로그인 처리하기 === -->
	<select id="getLoginMember" parameterType="HashMap" resultType="com.spring.model.MemberVO">
		select idx, userid, name, email
		     , trunc( months_between(sysdate, lastPwdChangeDate) ) AS pwdchangegap  
			 , trunc( months_between(sysdate, lastLoginDate) ) AS lastlogindategap 
		from yes_member 
		where status = 1 and 
		      userid = #{userid} and 
		      pwd = #{pwd}
	</select>
	<update id="setLastLoginDate" parameterType="HashMap">
		update yes_member set lastLoginDate = sysdate 
		where status = 1 and userid = #{userid}
	</update>


	
	<!-- API 회원으로 등록이 되어있는지 확인 -->
	<select id="kakaoMember" resultType="com.spring.model.MemberVO" parameterType="HashMap">
		select idx, userid, name, email
		     , trunc( months_between(sysdate, lastPwdChangeDate) ) AS pwdchangegap  
		     , trunc( months_between(sysdate, lastLoginDate) ) AS lastlogindategap 
		from yes_member 
		where status = 1 and 
		      email = #{email} 
	</select>

	<!-- 아이디 중복 유무 -->
	<select id="idDuplicateCheck" resultType="String" parameterType="String">
		select userid 
		from yes_member
		where status = 1 and userid = #{userid}
	</select>

	<!-- 카카오 회원가입 -->
	<!-- <insert id="kakaoRegister" parameterType="com.spring.model.MemberVO" >
		insert into yes_member(idx, userid, name, pwd, email, hp1, hp2, hp3, postcode, address, detailAddress, extraAddress, gender, birthday, coin, point, registerday, status, lastlogindate, lastpwdchangedate, clientip, kakaoStatus, naverStatus) 
		values(seq_member.nextval, #{userid}, #{name}, #{pwd}, #{email} , #{hp1}, #{hp2}, #{hp3}, #{postcode}, #{address}, #{detailAddress}, #{extraAddress}, #{gender}, #{birthyyyy}||#{birthmm}||#{birthdd}, default, default, default, default, default, default, #{clientip}, '1', default)
	</insert> -->
	
	<!-- 카카오 회원가입 -->
	<insert id="kakaoRegister" parameterType="com.spring.model.MemberVO" >
		insert into yes_member(idx, userid, name, pwd, email, hp1, hp2, hp3, postcode, address, detailAddress, coin, point, registerday, status, lastlogindate, lastpwdchangedate, kakaoStatus, naverStatus, isSMS, isEMAIL) 
		values(seq_member.nextval, #{userid}, #{name}, #{pwd}, #{email} , #{hp1}, #{hp2}, #{hp3}, #{postcode}, #{address}, #{detailAddress}, default, default, default, default, default, default, '1', default, #{isSMS}, #{isEMAIL})
	</insert>
	
	
	<!-- 일반 회원 가입 -->
	<!-- <insert id="register" parameterType="com.spring.model.MemberVO">
		insert into yes_member(idx, userid, name, pwd, email, hp1, hp2, hp3, postcode, address, detailAddress, extraAddress, gender, birthday, coin, point, registerday, status, lastlogindate, lastpwdchangedate, clientip, kakaoStatus, naverStatus) 
		values(seq_member.nextval, #{userid}, #{name}, #{pwd}, #{email} , #{hp1}, #{hp2}, #{hp3}, #{postcode}, #{address}, #{detailAddress}, #{extraAddress}, #{gender}, #{birthyyyy}||#{birthmm}||#{birthdd}, default, default, default, default, default, default, #{clientip}, default, default)
	</insert>  -->
	
	<!-- 일반 회원 가입 -->
	<insert id="register" parameterType="com.spring.model.MemberVO">
		insert into yes_member(idx, userid, name, pwd, email, hp1, hp2, hp3, postcode, address, detailAddress, coin, point, registerday, status, lastlogindate, lastpwdchangedate, kakaoStatus, naverStatus, isSMS, isEMAIL) 
		values(seq_member.nextval, #{userid}, #{name}, #{pwd}, #{email} , #{hp1}, #{hp2}, #{hp3}, #{postcode}, #{address}, #{detailAddress}, default, default, default, default, default, default, default, default, #{isSMS}, #{isEMAIL})
	</insert>
	
	<!-- 이메일 중복 유무 -->
	<select id="emailDuplicateCheck" resultType="String" parameterType="String">
		select userid
		from yes_member 
		where ( status = 1 and
		      email = #{email} and 
		      kakaoStatus = '1')
		      or
		      ( status = 1 and
		      email = #{email} and 
		      naverStatus = '1')	
	
	</select>

	<!-- 카카오 상태 변경 -->
	<update id="kakaoStatus" parameterType="String">
		update yes_member
		set kakaoStatus = '1'
		where status = 1 and email = #{email}
	</update>

	<!-- 네이버 상태 변경 -->
	<update id="naverStatus" parameterType="String">
		update yes_member
		set naverStatus = '1'
		where status = 1 and email = #{email}
	</update>
	
	<!-- 네이버 회원가입 -->
	<!-- <insert id="naverRegister" parameterType="com.spring.model.MemberVO" >
			insert into yes_member(idx, userid, name, pwd, email, hp1, hp2, hp3, postcode, address, detailAddress, extraAddress, gender, birthday, coin, point, registerday, status, lastlogindate, lastpwdchangedate, clientip, kakaoStatus, naverStatus) 
			values(seq_member.nextval, #{userid}, #{name}, #{pwd}, #{email} , #{hp1}, #{hp2}, #{hp3}, #{postcode}, #{address}, #{detailAddress}, #{extraAddress}, #{gender}, #{birthyyyy}||#{birthmm}||#{birthdd}, default, default, default, default, default, default, #{clientip}, default, '1')
	</insert> -->
	
	<!-- 네이버 회원가입 -->
	<insert id="naverRegister" parameterType="com.spring.model.MemberVO" >
		insert into yes_member(idx, userid, name, pwd, email, hp1, hp2, hp3, postcode, address, detailAddress, coin, point, registerday, status, lastlogindate, lastpwdchangedate, kakaoStatus, naverStatus, isSMS, isEMAIL) 
		values(seq_member.nextval, #{userid}, #{name}, #{pwd}, #{email} , #{hp1}, #{hp2}, #{hp3}, #{postcode}, #{address}, #{detailAddress}, default, default, default, default, default, default, default, '1', #{isSMS}, #{isEMAIL})
	</insert>
	
	
	
	<!-- 회원 수정 페이지 -->
	<select id="modifyInfo" parameterType="String" resultType="com.spring.model.MemberVO">
		select userid, name, postcode, address, detailaddress, hp1, hp2, hp3, email, isSMS, isEMAIL
		from yes_member
		where idx = #{idx}
	</select>
	
	
	<update id="modifyEnd" parameterType="HashMap">
		update yes_member
		<if test="pwd.equals('')">
		set name = #{name}, email = #{email}, hp1 = #{hp1}, hp2 = #{hp2}, hp3 = #{hp3}, postcode = #{postcode}, address = #{address}, detailAddress = #{detailAddress}, isSMS = #{isSMS}, isEMAIL = #{isEMAIL}
		</if>
		<if test="!pwd.equals('')">
		set name = #{name}, pwd = #{pwd}, email = #{email}, hp1 = #{hp1}, hp2 = #{hp2}, hp3 = #{hp3}, postcode = #{postcode}, address = #{address}, detailAddress = #{detailAddress}, isSMS = #{isSMS}, isEMAIL = #{isEMAIL}
		</if>
		where idx = #{idx}
	</update>
	
	<!-- 로그인된 경우 해당 세션id와 유효시간을 사용자 테이블에 세팅한다. -->
    <update id="keepLogin" parameterType="HashMap">
        update yes_member 
        set sessionKey = #{sessionId}, sessionLimit = #{sessionLimit}
        where status = 1 and userid = #{userid}
    </update>
     
    <!-- 유효기간이 남아 있으면서 해당 sessionId를 가지는 사용자 정보를 꺼내오는 부분 -->
    <select id="checkUserWithSessionKey" resultType="com.spring.model.MemberVO">
        select idx, userid, name, email
		     , trunc( months_between(sysdate, lastPwdChangeDate) ) AS pwdchangegap  
			 , trunc( months_between(sysdate, lastLoginDate) ) AS lastlogindategap 
        from yes_member
        where status = 1 and  sessionKey = #{sessionId} and sessionLimit > sysdate
    </select>

	<!-- 회원 탈퇴 -->
	<update id="infoDelete" parameterType="HashMap">
		update yes_member
		set status = 0
		where idx = #{idx} and pwd = #{pwd} 
	</update>
	
	
	<!-- AOP pointPlus -->
	<update id="pointPlus" parameterType="HashMap">
		update yes_member set point = point + to_number(#{pointPlus})
		where userid = #{userid}
	</update>
	
	
	<!-- 쿠폰 관련 SQL -->
	<select id="getCouponIs" parameterType="HashMap" resultType="Integer">
		select count(*)
		from yes_coupon
		where fk_userid=#{userid} and coupon_name=#{couponName} and coupon_status=1
	</select>
	
	<!-- 쿠폰 발급받기 -->
	<insert id="getCoupon" parameterType="HashMap">
		insert into yes_coupon(coupon_id, coupon_dc, coupon_status, coupon_newdate, coupon_usedate, coupon_olddate, coupon_name, coupon_condition, fk_userid) 
		values(seq_coupon.nextval, #{couponDC}, 1, sysdate, null, sysdate+7, #{couponName}, default, #{userid}) 
	</insert>
	

</mapper>